

apply plugin: 'com.android.application'
apply from: '../config-android.gradle'
apply plugin: 'com.google.firebase.crashlytics'

def getVersionCodeTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHHmm')
    def code = formattedDate.toBigInteger()
    println sprintf("VersionCode: %d", code)
    return code
}

android {
    defaultConfig {
        applicationId "com.hb.map.navigation.app"
        versionCode getVersionCodeTimestamp()
        versionName "1.0.1"
    }



    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }
    

    signingConfigs {
        debug {
            storeFile file("../publish/debug.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file("../publish/release.keystore")
            storePassword KEYSTORE_PASSWORD
            keyAlias 'vietbando'
            keyPassword KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def date = new Date()
                def formattedDate = date.format('yyyyMMdd_HHmm')
                outputFileName = outputFileName.replace(".apk", "-${formattedDate}.apk")
            }
        }
    }

    flavorDimensions "mode"

//    productFlavors {
//        incident {
//            applicationId "com.vbd.dc.t4ch"
////            resValue "string", "app_name", "vCloudcam"
////            manifestPlaceholders = [icon_app: "@drawable/ic_logo_vcloud_cam"]
//        }
//    }
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.mapbox.mapboxsdk') {
            if (requested.name.contains('annotation')) {
                details.useTarget('com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v9:0.8.0')
            }
        }
    }
}

dependencies {
    api project(':map_navigation_ui')

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    libLocal()
    kotlin()
    support()
    multidex()
    debugging()

    //
    gms()
    firebase()
    //
    architectureComponents()
    room()

    //
    koin()
    networking()
    rx()
    //

    // UI
    ui()
    implementation "com.tapadoo.android:alerter:3.0.1"
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    //
    implementation 'com.vincentbrison.openlibraries.android:dualcache:3.1.1'

    //
    testing()


}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
